// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/proto/v10/pb/pb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ask_Any_FullMethodName                       = "/mgrpc.v10.Ask/Any"
	Ask_Int64AskBool_FullMethodName              = "/mgrpc.v10.Ask/Int64AskBool"
	Ask_Int64AskBytes_FullMethodName             = "/mgrpc.v10.Ask/Int64AskBytes"
	Ask_Int64AskInt64_FullMethodName             = "/mgrpc.v10.Ask/Int64AskInt64"
	Ask_Int64AskFloat64_FullMethodName           = "/mgrpc.v10.Ask/Int64AskFloat64"
	Ask_Int64AskString_FullMethodName            = "/mgrpc.v10.Ask/Int64AskString"
	Ask_Int64AskStringArray_FullMethodName       = "/mgrpc.v10.Ask/Int64AskStringArray"
	Ask_Int64AskMapStringBool_FullMethodName     = "/mgrpc.v10.Ask/Int64AskMapStringBool"
	Ask_Int64AskMapStringInt64_FullMethodName    = "/mgrpc.v10.Ask/Int64AskMapStringInt64"
	Ask_Int64AskMapStringFloat64_FullMethodName  = "/mgrpc.v10.Ask/Int64AskMapStringFloat64"
	Ask_Int64AskMapStringString_FullMethodName   = "/mgrpc.v10.Ask/Int64AskMapStringString"
	Ask_Int64AskMapStringBytes_FullMethodName    = "/mgrpc.v10.Ask/Int64AskMapStringBytes"
	Ask_StringAskBool_FullMethodName             = "/mgrpc.v10.Ask/StringAskBool"
	Ask_StringAskBytes_FullMethodName            = "/mgrpc.v10.Ask/StringAskBytes"
	Ask_StringAskInt64_FullMethodName            = "/mgrpc.v10.Ask/StringAskInt64"
	Ask_StringAskFloat64_FullMethodName          = "/mgrpc.v10.Ask/StringAskFloat64"
	Ask_StringAskString_FullMethodName           = "/mgrpc.v10.Ask/StringAskString"
	Ask_StringAskStringArray_FullMethodName      = "/mgrpc.v10.Ask/StringAskStringArray"
	Ask_StringAskMapStringBool_FullMethodName    = "/mgrpc.v10.Ask/StringAskMapStringBool"
	Ask_StringAskMapStringInt64_FullMethodName   = "/mgrpc.v10.Ask/StringAskMapStringInt64"
	Ask_StringAskMapStringFloat64_FullMethodName = "/mgrpc.v10.Ask/StringAskMapStringFloat64"
	Ask_StringAskMapStringString_FullMethodName  = "/mgrpc.v10.Ask/StringAskMapStringString"
	Ask_StringAskMapStringBytes_FullMethodName   = "/mgrpc.v10.Ask/StringAskMapStringBytes"
	Ask_BytesAskBool_FullMethodName              = "/mgrpc.v10.Ask/BytesAskBool"
	Ask_BytesAskBytes_FullMethodName             = "/mgrpc.v10.Ask/BytesAskBytes"
	Ask_BytesAskInt64_FullMethodName             = "/mgrpc.v10.Ask/BytesAskInt64"
	Ask_BytesAskFloat64_FullMethodName           = "/mgrpc.v10.Ask/BytesAskFloat64"
	Ask_BytesAskString_FullMethodName            = "/mgrpc.v10.Ask/BytesAskString"
	Ask_BytesAskStringArray_FullMethodName       = "/mgrpc.v10.Ask/BytesAskStringArray"
	Ask_BytesAskMapStringBool_FullMethodName     = "/mgrpc.v10.Ask/BytesAskMapStringBool"
	Ask_BytesAskMapStringInt64_FullMethodName    = "/mgrpc.v10.Ask/BytesAskMapStringInt64"
	Ask_BytesAskMapStringFloat64_FullMethodName  = "/mgrpc.v10.Ask/BytesAskMapStringFloat64"
	Ask_BytesAskMapStringString_FullMethodName   = "/mgrpc.v10.Ask/BytesAskMapStringString"
	Ask_BytesAskMapStringBytes_FullMethodName    = "/mgrpc.v10.Ask/BytesAskMapStringBytes"
)

// AskClient is the client API for Ask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AskClient interface {
	Any(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	Int64AskBool(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*KvBool, error)
	Int64AskBytes(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*KvBytes, error)
	Int64AskInt64(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*KvInt64, error)
	Int64AskFloat64(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*KvFloat64, error)
	Int64AskString(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*KvString, error)
	Int64AskStringArray(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*KvStringArray, error)
	Int64AskMapStringBool(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*MapStringBool, error)
	Int64AskMapStringInt64(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*MapStringInt64, error)
	Int64AskMapStringFloat64(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*MapStringFloat64, error)
	Int64AskMapStringString(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*MapStringString, error)
	Int64AskMapStringBytes(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*MapStringBytes, error)
	StringAskBool(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*KvBool, error)
	StringAskBytes(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*KvBytes, error)
	StringAskInt64(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*KvInt64, error)
	StringAskFloat64(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*KvFloat64, error)
	StringAskString(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*KvString, error)
	StringAskStringArray(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*KvStringArray, error)
	StringAskMapStringBool(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*MapStringBool, error)
	StringAskMapStringInt64(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*MapStringInt64, error)
	StringAskMapStringFloat64(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*MapStringFloat64, error)
	StringAskMapStringString(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*MapStringString, error)
	StringAskMapStringBytes(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*MapStringBytes, error)
	BytesAskBool(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*KvBool, error)
	BytesAskBytes(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*KvBytes, error)
	BytesAskInt64(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*KvInt64, error)
	BytesAskFloat64(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*KvFloat64, error)
	BytesAskString(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*KvString, error)
	BytesAskStringArray(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*KvStringArray, error)
	BytesAskMapStringBool(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*MapStringBool, error)
	BytesAskMapStringInt64(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*MapStringInt64, error)
	BytesAskMapStringFloat64(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*MapStringFloat64, error)
	BytesAskMapStringString(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*MapStringString, error)
	BytesAskMapStringBytes(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*MapStringBytes, error)
}

type askClient struct {
	cc grpc.ClientConnInterface
}

func NewAskClient(cc grpc.ClientConnInterface) AskClient {
	return &askClient{cc}
}

func (c *askClient) Any(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, Ask_Any_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) Int64AskBool(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*KvBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvBool)
	err := c.cc.Invoke(ctx, Ask_Int64AskBool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) Int64AskBytes(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*KvBytes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvBytes)
	err := c.cc.Invoke(ctx, Ask_Int64AskBytes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) Int64AskInt64(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*KvInt64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvInt64)
	err := c.cc.Invoke(ctx, Ask_Int64AskInt64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) Int64AskFloat64(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*KvFloat64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvFloat64)
	err := c.cc.Invoke(ctx, Ask_Int64AskFloat64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) Int64AskString(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*KvString, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvString)
	err := c.cc.Invoke(ctx, Ask_Int64AskString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) Int64AskStringArray(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*KvStringArray, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvStringArray)
	err := c.cc.Invoke(ctx, Ask_Int64AskStringArray_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) Int64AskMapStringBool(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*MapStringBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringBool)
	err := c.cc.Invoke(ctx, Ask_Int64AskMapStringBool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) Int64AskMapStringInt64(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*MapStringInt64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringInt64)
	err := c.cc.Invoke(ctx, Ask_Int64AskMapStringInt64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) Int64AskMapStringFloat64(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*MapStringFloat64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringFloat64)
	err := c.cc.Invoke(ctx, Ask_Int64AskMapStringFloat64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) Int64AskMapStringString(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*MapStringString, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringString)
	err := c.cc.Invoke(ctx, Ask_Int64AskMapStringString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) Int64AskMapStringBytes(ctx context.Context, in *KvInt64, opts ...grpc.CallOption) (*MapStringBytes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringBytes)
	err := c.cc.Invoke(ctx, Ask_Int64AskMapStringBytes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) StringAskBool(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*KvBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvBool)
	err := c.cc.Invoke(ctx, Ask_StringAskBool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) StringAskBytes(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*KvBytes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvBytes)
	err := c.cc.Invoke(ctx, Ask_StringAskBytes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) StringAskInt64(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*KvInt64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvInt64)
	err := c.cc.Invoke(ctx, Ask_StringAskInt64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) StringAskFloat64(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*KvFloat64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvFloat64)
	err := c.cc.Invoke(ctx, Ask_StringAskFloat64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) StringAskString(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*KvString, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvString)
	err := c.cc.Invoke(ctx, Ask_StringAskString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) StringAskStringArray(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*KvStringArray, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvStringArray)
	err := c.cc.Invoke(ctx, Ask_StringAskStringArray_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) StringAskMapStringBool(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*MapStringBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringBool)
	err := c.cc.Invoke(ctx, Ask_StringAskMapStringBool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) StringAskMapStringInt64(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*MapStringInt64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringInt64)
	err := c.cc.Invoke(ctx, Ask_StringAskMapStringInt64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) StringAskMapStringFloat64(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*MapStringFloat64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringFloat64)
	err := c.cc.Invoke(ctx, Ask_StringAskMapStringFloat64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) StringAskMapStringString(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*MapStringString, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringString)
	err := c.cc.Invoke(ctx, Ask_StringAskMapStringString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) StringAskMapStringBytes(ctx context.Context, in *KvString, opts ...grpc.CallOption) (*MapStringBytes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringBytes)
	err := c.cc.Invoke(ctx, Ask_StringAskMapStringBytes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) BytesAskBool(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*KvBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvBool)
	err := c.cc.Invoke(ctx, Ask_BytesAskBool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) BytesAskBytes(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*KvBytes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvBytes)
	err := c.cc.Invoke(ctx, Ask_BytesAskBytes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) BytesAskInt64(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*KvInt64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvInt64)
	err := c.cc.Invoke(ctx, Ask_BytesAskInt64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) BytesAskFloat64(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*KvFloat64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvFloat64)
	err := c.cc.Invoke(ctx, Ask_BytesAskFloat64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) BytesAskString(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*KvString, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvString)
	err := c.cc.Invoke(ctx, Ask_BytesAskString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) BytesAskStringArray(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*KvStringArray, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KvStringArray)
	err := c.cc.Invoke(ctx, Ask_BytesAskStringArray_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) BytesAskMapStringBool(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*MapStringBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringBool)
	err := c.cc.Invoke(ctx, Ask_BytesAskMapStringBool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) BytesAskMapStringInt64(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*MapStringInt64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringInt64)
	err := c.cc.Invoke(ctx, Ask_BytesAskMapStringInt64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) BytesAskMapStringFloat64(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*MapStringFloat64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringFloat64)
	err := c.cc.Invoke(ctx, Ask_BytesAskMapStringFloat64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) BytesAskMapStringString(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*MapStringString, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringString)
	err := c.cc.Invoke(ctx, Ask_BytesAskMapStringString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askClient) BytesAskMapStringBytes(ctx context.Context, in *KvBytes, opts ...grpc.CallOption) (*MapStringBytes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapStringBytes)
	err := c.cc.Invoke(ctx, Ask_BytesAskMapStringBytes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AskServer is the server API for Ask service.
// All implementations must embed UnimplementedAskServer
// for forward compatibility.
type AskServer interface {
	Any(context.Context, *anypb.Any) (*anypb.Any, error)
	Int64AskBool(context.Context, *KvInt64) (*KvBool, error)
	Int64AskBytes(context.Context, *KvInt64) (*KvBytes, error)
	Int64AskInt64(context.Context, *KvInt64) (*KvInt64, error)
	Int64AskFloat64(context.Context, *KvInt64) (*KvFloat64, error)
	Int64AskString(context.Context, *KvInt64) (*KvString, error)
	Int64AskStringArray(context.Context, *KvInt64) (*KvStringArray, error)
	Int64AskMapStringBool(context.Context, *KvInt64) (*MapStringBool, error)
	Int64AskMapStringInt64(context.Context, *KvInt64) (*MapStringInt64, error)
	Int64AskMapStringFloat64(context.Context, *KvInt64) (*MapStringFloat64, error)
	Int64AskMapStringString(context.Context, *KvInt64) (*MapStringString, error)
	Int64AskMapStringBytes(context.Context, *KvInt64) (*MapStringBytes, error)
	StringAskBool(context.Context, *KvString) (*KvBool, error)
	StringAskBytes(context.Context, *KvString) (*KvBytes, error)
	StringAskInt64(context.Context, *KvString) (*KvInt64, error)
	StringAskFloat64(context.Context, *KvString) (*KvFloat64, error)
	StringAskString(context.Context, *KvString) (*KvString, error)
	StringAskStringArray(context.Context, *KvString) (*KvStringArray, error)
	StringAskMapStringBool(context.Context, *KvString) (*MapStringBool, error)
	StringAskMapStringInt64(context.Context, *KvString) (*MapStringInt64, error)
	StringAskMapStringFloat64(context.Context, *KvString) (*MapStringFloat64, error)
	StringAskMapStringString(context.Context, *KvString) (*MapStringString, error)
	StringAskMapStringBytes(context.Context, *KvString) (*MapStringBytes, error)
	BytesAskBool(context.Context, *KvBytes) (*KvBool, error)
	BytesAskBytes(context.Context, *KvBytes) (*KvBytes, error)
	BytesAskInt64(context.Context, *KvBytes) (*KvInt64, error)
	BytesAskFloat64(context.Context, *KvBytes) (*KvFloat64, error)
	BytesAskString(context.Context, *KvBytes) (*KvString, error)
	BytesAskStringArray(context.Context, *KvBytes) (*KvStringArray, error)
	BytesAskMapStringBool(context.Context, *KvBytes) (*MapStringBool, error)
	BytesAskMapStringInt64(context.Context, *KvBytes) (*MapStringInt64, error)
	BytesAskMapStringFloat64(context.Context, *KvBytes) (*MapStringFloat64, error)
	BytesAskMapStringString(context.Context, *KvBytes) (*MapStringString, error)
	BytesAskMapStringBytes(context.Context, *KvBytes) (*MapStringBytes, error)
	mustEmbedUnimplementedAskServer()
}

// UnimplementedAskServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAskServer struct{}

func (UnimplementedAskServer) Any(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Any not implemented")
}
func (UnimplementedAskServer) Int64AskBool(context.Context, *KvInt64) (*KvBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64AskBool not implemented")
}
func (UnimplementedAskServer) Int64AskBytes(context.Context, *KvInt64) (*KvBytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64AskBytes not implemented")
}
func (UnimplementedAskServer) Int64AskInt64(context.Context, *KvInt64) (*KvInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64AskInt64 not implemented")
}
func (UnimplementedAskServer) Int64AskFloat64(context.Context, *KvInt64) (*KvFloat64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64AskFloat64 not implemented")
}
func (UnimplementedAskServer) Int64AskString(context.Context, *KvInt64) (*KvString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64AskString not implemented")
}
func (UnimplementedAskServer) Int64AskStringArray(context.Context, *KvInt64) (*KvStringArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64AskStringArray not implemented")
}
func (UnimplementedAskServer) Int64AskMapStringBool(context.Context, *KvInt64) (*MapStringBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64AskMapStringBool not implemented")
}
func (UnimplementedAskServer) Int64AskMapStringInt64(context.Context, *KvInt64) (*MapStringInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64AskMapStringInt64 not implemented")
}
func (UnimplementedAskServer) Int64AskMapStringFloat64(context.Context, *KvInt64) (*MapStringFloat64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64AskMapStringFloat64 not implemented")
}
func (UnimplementedAskServer) Int64AskMapStringString(context.Context, *KvInt64) (*MapStringString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64AskMapStringString not implemented")
}
func (UnimplementedAskServer) Int64AskMapStringBytes(context.Context, *KvInt64) (*MapStringBytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64AskMapStringBytes not implemented")
}
func (UnimplementedAskServer) StringAskBool(context.Context, *KvString) (*KvBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringAskBool not implemented")
}
func (UnimplementedAskServer) StringAskBytes(context.Context, *KvString) (*KvBytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringAskBytes not implemented")
}
func (UnimplementedAskServer) StringAskInt64(context.Context, *KvString) (*KvInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringAskInt64 not implemented")
}
func (UnimplementedAskServer) StringAskFloat64(context.Context, *KvString) (*KvFloat64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringAskFloat64 not implemented")
}
func (UnimplementedAskServer) StringAskString(context.Context, *KvString) (*KvString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringAskString not implemented")
}
func (UnimplementedAskServer) StringAskStringArray(context.Context, *KvString) (*KvStringArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringAskStringArray not implemented")
}
func (UnimplementedAskServer) StringAskMapStringBool(context.Context, *KvString) (*MapStringBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringAskMapStringBool not implemented")
}
func (UnimplementedAskServer) StringAskMapStringInt64(context.Context, *KvString) (*MapStringInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringAskMapStringInt64 not implemented")
}
func (UnimplementedAskServer) StringAskMapStringFloat64(context.Context, *KvString) (*MapStringFloat64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringAskMapStringFloat64 not implemented")
}
func (UnimplementedAskServer) StringAskMapStringString(context.Context, *KvString) (*MapStringString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringAskMapStringString not implemented")
}
func (UnimplementedAskServer) StringAskMapStringBytes(context.Context, *KvString) (*MapStringBytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringAskMapStringBytes not implemented")
}
func (UnimplementedAskServer) BytesAskBool(context.Context, *KvBytes) (*KvBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesAskBool not implemented")
}
func (UnimplementedAskServer) BytesAskBytes(context.Context, *KvBytes) (*KvBytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesAskBytes not implemented")
}
func (UnimplementedAskServer) BytesAskInt64(context.Context, *KvBytes) (*KvInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesAskInt64 not implemented")
}
func (UnimplementedAskServer) BytesAskFloat64(context.Context, *KvBytes) (*KvFloat64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesAskFloat64 not implemented")
}
func (UnimplementedAskServer) BytesAskString(context.Context, *KvBytes) (*KvString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesAskString not implemented")
}
func (UnimplementedAskServer) BytesAskStringArray(context.Context, *KvBytes) (*KvStringArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesAskStringArray not implemented")
}
func (UnimplementedAskServer) BytesAskMapStringBool(context.Context, *KvBytes) (*MapStringBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesAskMapStringBool not implemented")
}
func (UnimplementedAskServer) BytesAskMapStringInt64(context.Context, *KvBytes) (*MapStringInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesAskMapStringInt64 not implemented")
}
func (UnimplementedAskServer) BytesAskMapStringFloat64(context.Context, *KvBytes) (*MapStringFloat64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesAskMapStringFloat64 not implemented")
}
func (UnimplementedAskServer) BytesAskMapStringString(context.Context, *KvBytes) (*MapStringString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesAskMapStringString not implemented")
}
func (UnimplementedAskServer) BytesAskMapStringBytes(context.Context, *KvBytes) (*MapStringBytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BytesAskMapStringBytes not implemented")
}
func (UnimplementedAskServer) mustEmbedUnimplementedAskServer() {}
func (UnimplementedAskServer) testEmbeddedByValue()             {}

// UnsafeAskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AskServer will
// result in compilation errors.
type UnsafeAskServer interface {
	mustEmbedUnimplementedAskServer()
}

func RegisterAskServer(s grpc.ServiceRegistrar, srv AskServer) {
	// If the following call pancis, it indicates UnimplementedAskServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ask_ServiceDesc, srv)
}

func _Ask_Any_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).Any(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_Any_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).Any(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_Int64AskBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).Int64AskBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_Int64AskBool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).Int64AskBool(ctx, req.(*KvInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_Int64AskBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).Int64AskBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_Int64AskBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).Int64AskBytes(ctx, req.(*KvInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_Int64AskInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).Int64AskInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_Int64AskInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).Int64AskInt64(ctx, req.(*KvInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_Int64AskFloat64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).Int64AskFloat64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_Int64AskFloat64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).Int64AskFloat64(ctx, req.(*KvInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_Int64AskString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).Int64AskString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_Int64AskString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).Int64AskString(ctx, req.(*KvInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_Int64AskStringArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).Int64AskStringArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_Int64AskStringArray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).Int64AskStringArray(ctx, req.(*KvInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_Int64AskMapStringBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).Int64AskMapStringBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_Int64AskMapStringBool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).Int64AskMapStringBool(ctx, req.(*KvInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_Int64AskMapStringInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).Int64AskMapStringInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_Int64AskMapStringInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).Int64AskMapStringInt64(ctx, req.(*KvInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_Int64AskMapStringFloat64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).Int64AskMapStringFloat64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_Int64AskMapStringFloat64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).Int64AskMapStringFloat64(ctx, req.(*KvInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_Int64AskMapStringString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).Int64AskMapStringString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_Int64AskMapStringString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).Int64AskMapStringString(ctx, req.(*KvInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_Int64AskMapStringBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).Int64AskMapStringBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_Int64AskMapStringBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).Int64AskMapStringBytes(ctx, req.(*KvInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_StringAskBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).StringAskBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_StringAskBool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).StringAskBool(ctx, req.(*KvString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_StringAskBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).StringAskBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_StringAskBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).StringAskBytes(ctx, req.(*KvString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_StringAskInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).StringAskInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_StringAskInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).StringAskInt64(ctx, req.(*KvString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_StringAskFloat64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).StringAskFloat64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_StringAskFloat64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).StringAskFloat64(ctx, req.(*KvString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_StringAskString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).StringAskString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_StringAskString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).StringAskString(ctx, req.(*KvString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_StringAskStringArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).StringAskStringArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_StringAskStringArray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).StringAskStringArray(ctx, req.(*KvString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_StringAskMapStringBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).StringAskMapStringBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_StringAskMapStringBool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).StringAskMapStringBool(ctx, req.(*KvString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_StringAskMapStringInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).StringAskMapStringInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_StringAskMapStringInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).StringAskMapStringInt64(ctx, req.(*KvString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_StringAskMapStringFloat64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).StringAskMapStringFloat64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_StringAskMapStringFloat64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).StringAskMapStringFloat64(ctx, req.(*KvString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_StringAskMapStringString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).StringAskMapStringString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_StringAskMapStringString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).StringAskMapStringString(ctx, req.(*KvString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_StringAskMapStringBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).StringAskMapStringBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_StringAskMapStringBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).StringAskMapStringBytes(ctx, req.(*KvString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_BytesAskBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).BytesAskBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_BytesAskBool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).BytesAskBool(ctx, req.(*KvBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_BytesAskBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).BytesAskBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_BytesAskBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).BytesAskBytes(ctx, req.(*KvBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_BytesAskInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).BytesAskInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_BytesAskInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).BytesAskInt64(ctx, req.(*KvBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_BytesAskFloat64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).BytesAskFloat64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_BytesAskFloat64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).BytesAskFloat64(ctx, req.(*KvBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_BytesAskString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).BytesAskString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_BytesAskString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).BytesAskString(ctx, req.(*KvBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_BytesAskStringArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).BytesAskStringArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_BytesAskStringArray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).BytesAskStringArray(ctx, req.(*KvBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_BytesAskMapStringBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).BytesAskMapStringBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_BytesAskMapStringBool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).BytesAskMapStringBool(ctx, req.(*KvBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_BytesAskMapStringInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).BytesAskMapStringInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_BytesAskMapStringInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).BytesAskMapStringInt64(ctx, req.(*KvBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_BytesAskMapStringFloat64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).BytesAskMapStringFloat64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_BytesAskMapStringFloat64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).BytesAskMapStringFloat64(ctx, req.(*KvBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_BytesAskMapStringString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).BytesAskMapStringString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_BytesAskMapStringString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).BytesAskMapStringString(ctx, req.(*KvBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ask_BytesAskMapStringBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskServer).BytesAskMapStringBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ask_BytesAskMapStringBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskServer).BytesAskMapStringBytes(ctx, req.(*KvBytes))
	}
	return interceptor(ctx, in, info, handler)
}

// Ask_ServiceDesc is the grpc.ServiceDesc for Ask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mgrpc.v10.Ask",
	HandlerType: (*AskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Any",
			Handler:    _Ask_Any_Handler,
		},
		{
			MethodName: "Int64AskBool",
			Handler:    _Ask_Int64AskBool_Handler,
		},
		{
			MethodName: "Int64AskBytes",
			Handler:    _Ask_Int64AskBytes_Handler,
		},
		{
			MethodName: "Int64AskInt64",
			Handler:    _Ask_Int64AskInt64_Handler,
		},
		{
			MethodName: "Int64AskFloat64",
			Handler:    _Ask_Int64AskFloat64_Handler,
		},
		{
			MethodName: "Int64AskString",
			Handler:    _Ask_Int64AskString_Handler,
		},
		{
			MethodName: "Int64AskStringArray",
			Handler:    _Ask_Int64AskStringArray_Handler,
		},
		{
			MethodName: "Int64AskMapStringBool",
			Handler:    _Ask_Int64AskMapStringBool_Handler,
		},
		{
			MethodName: "Int64AskMapStringInt64",
			Handler:    _Ask_Int64AskMapStringInt64_Handler,
		},
		{
			MethodName: "Int64AskMapStringFloat64",
			Handler:    _Ask_Int64AskMapStringFloat64_Handler,
		},
		{
			MethodName: "Int64AskMapStringString",
			Handler:    _Ask_Int64AskMapStringString_Handler,
		},
		{
			MethodName: "Int64AskMapStringBytes",
			Handler:    _Ask_Int64AskMapStringBytes_Handler,
		},
		{
			MethodName: "StringAskBool",
			Handler:    _Ask_StringAskBool_Handler,
		},
		{
			MethodName: "StringAskBytes",
			Handler:    _Ask_StringAskBytes_Handler,
		},
		{
			MethodName: "StringAskInt64",
			Handler:    _Ask_StringAskInt64_Handler,
		},
		{
			MethodName: "StringAskFloat64",
			Handler:    _Ask_StringAskFloat64_Handler,
		},
		{
			MethodName: "StringAskString",
			Handler:    _Ask_StringAskString_Handler,
		},
		{
			MethodName: "StringAskStringArray",
			Handler:    _Ask_StringAskStringArray_Handler,
		},
		{
			MethodName: "StringAskMapStringBool",
			Handler:    _Ask_StringAskMapStringBool_Handler,
		},
		{
			MethodName: "StringAskMapStringInt64",
			Handler:    _Ask_StringAskMapStringInt64_Handler,
		},
		{
			MethodName: "StringAskMapStringFloat64",
			Handler:    _Ask_StringAskMapStringFloat64_Handler,
		},
		{
			MethodName: "StringAskMapStringString",
			Handler:    _Ask_StringAskMapStringString_Handler,
		},
		{
			MethodName: "StringAskMapStringBytes",
			Handler:    _Ask_StringAskMapStringBytes_Handler,
		},
		{
			MethodName: "BytesAskBool",
			Handler:    _Ask_BytesAskBool_Handler,
		},
		{
			MethodName: "BytesAskBytes",
			Handler:    _Ask_BytesAskBytes_Handler,
		},
		{
			MethodName: "BytesAskInt64",
			Handler:    _Ask_BytesAskInt64_Handler,
		},
		{
			MethodName: "BytesAskFloat64",
			Handler:    _Ask_BytesAskFloat64_Handler,
		},
		{
			MethodName: "BytesAskString",
			Handler:    _Ask_BytesAskString_Handler,
		},
		{
			MethodName: "BytesAskStringArray",
			Handler:    _Ask_BytesAskStringArray_Handler,
		},
		{
			MethodName: "BytesAskMapStringBool",
			Handler:    _Ask_BytesAskMapStringBool_Handler,
		},
		{
			MethodName: "BytesAskMapStringInt64",
			Handler:    _Ask_BytesAskMapStringInt64_Handler,
		},
		{
			MethodName: "BytesAskMapStringFloat64",
			Handler:    _Ask_BytesAskMapStringFloat64_Handler,
		},
		{
			MethodName: "BytesAskMapStringString",
			Handler:    _Ask_BytesAskMapStringString_Handler,
		},
		{
			MethodName: "BytesAskMapStringBytes",
			Handler:    _Ask_BytesAskMapStringBytes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/v10/pb/pb.proto",
}
